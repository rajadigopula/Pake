name: Build Kimi Pake MSI

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-win:
    runs-on: windows-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Clone Pake
        run: git clone https://github.com/tw93/pake.git _pake

      - name: Install Pake deps
        working-directory: _pake
        run: npm install

      # ------------------------------------------------------------------
      # Create a tiny JS snippet that will be injected into every page.
      # It toggles all the WebView flags we need *before* any auth flow runs.
      # ------------------------------------------------------------------
      - name: Create injector script
        run: |
          @"
          // injector.js – runs in every page before anything else
          // 1. Spoof UA so Google/Kimi think we are a real desktop Chrome
          Object.defineProperty(navigator, 'userAgent', {
            value: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36'
          });

          // 2. Allow third-party cookies by explicitly accessing the cookie jar
          document.cookie = 'kimi_pake_cookie_test=1; SameSite=None; Secure';

          // 3. Relax CSP for statics.moonshot.cn and Google OAuth
          const meta = document.createElement('meta');
          meta.httpEquiv = 'Content-Security-Policy';
          meta.content = "default-src * data: blob: 'unsafe-inline' 'unsafe-eval'; script-src * 'unsafe-inline' 'unsafe-eval'; connect-src * ws: wss:; img-src * data: blob:; style-src * 'unsafe-inline'; font-src * data:; frame-src *;";
          document.head.appendChild(meta);

          // 4. Force-open pop-ups in the same WebView (no external browser)
          window.open = (url => { location.href = url; return window; });
          "@ | Out-File -FilePath injector.js -Encoding UTF8

      # ------------------------------------------------------------------
      # Build the app with all flags turned on.
      # --inject  : runs injector.js in every page
      # --user-agent : redundant but keeps UA consistent even on first nav
      # --transparent, --fullscreen, etc. are optional – keep or remove
      # ------------------------------------------------------------------
      - name: Build Pake app
        working-directory: _pake
        run: |
          npx pake https://www.kimi.com/ `
            --name "Kimi-K2" `
            --targets x86_64-pc-windows-msvc `
            --inject ../injector.js `
            --user-agent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36" `
            --enable-javascript `
            --enable-cookies `
            --disable-popup-block

      - name: Find and rename MSI
        shell: pwsh
        run: |
          $msi = Get-ChildItem -Path _pake -Recurse -Filter "*.msi" | Select-Object -First 1
          if ($msi) {
            Copy-Item $msi.FullName Kimi-x64.msi
          } else {
            throw "MSI not found"
          }

      - name: Upload MSI
        uses: actions/upload-artifact@v4
        with:
          name: Kimi-x64
          path: Kimi-x64.msi
